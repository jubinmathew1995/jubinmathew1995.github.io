[{"content":"This cheat sheet-style guide provides a quick reference to commands and practices commonly used when working Command Line (CLI). This cheat sheet mostly uses bash or zsh.\nexplainshell demystify the complex CLI commands. cheat.sh and tldr.sh are also amazing resource for references.\nDocumentation man - By Default the system documentation/manuals are documented in the man pages # Usage: man \u0026lt;COMMAND\u0026gt; help - Lists all the internal commands of shell # Usage: help Bash structure ~/.bashrc - configure the shell, define command aliases and set command shell options ~/.bash_profile - initialization commands that set environment variables, a shell\u0026rsquo;s prompt ~/.bash_logout - cleanup operations and other commands that you want the shell to execute whenever a user logs out of a shell ~/.bash_aliases - if storing many aliases commands Shell Script set -x # Enable RAW i/o set -v # Enable RAW i/o set -e # abort on error(non-zero exit code) set -u # detect unset variables variable=${VARIABLE_NAME:-default} # default value if variable empty $(( (1+1)/5 )) # Arthematic operation ${1..10} # Sequence ${var%suffix} # trim a suffix named \u0026#39;suffix\u0026#39; ${var#prefix} # trim a prefix named \u0026#39;prefix\u0026#39; ${foo,bar} # expand into multiple values diff /etc/hosts \u0026lt; (ssh somehost cat /etc/hosts) # parenthesis to execute a sub-process {..} # Include code in between this block, as a good practice cat \u0026lt;\u0026lt;EOF touch somefile echo foo \u0026gt; somefile EOF # Bash Script strict mode #!/bin/bash set -euo pipefile IFS=$\u0026#39;\\n\\t\u0026#39; Redirection File Descriptors - every file has an associated number called FD. Default ones are\n0 - STDIN 1 - STDOUT 2 - STDERR Types of redirection\n\u0026gt; - STDOUT redirection to file, overwrites at destination # Usage: ls -lrt \u0026gt; test.out \u0026gt;\u0026gt; - STDOUT redirection to file, appends at destination # Usage: ls -lrt \u0026gt;\u0026gt; test.out \u0026lt; - STDIN redirection from a file # Usage: wc \u0026lt; input_file.out File Descriptors based redirection # Usage: # Redirect the STDERR to STDOUT ls -lrt 2\u0026gt;\u0026amp;1 | - redirects STDOUT of one command into the STDIN of a second command # Usage: # Redirect the STDOUT to STDIN ls -lrt | wc Navigation Ctrl + a - Go to beginning Ctrl + e - Go to end Alt + b - Go back one word Alt + f - Go forward one word Ctrl + w - Delete a word backward Alt + d - Delete next word Ctrl + u - Delete to beginning of line OR delete line Ctrl + k - Delete to end Ctrl + r - Search backwards(recursive) Ctrl + s - Search forwards Ctrl + l - clears the screen Alt + t - transpose the last 2 words/characters Job Management \u0026amp; - background process. ctrl+z - pauses the process temporarily, and places it in SUSPENDED mode. fg - used to bring a background / paused process back to the foreground and continue its execution. bg - resume any SUSPENDED jobs and run them in background jobs - check the job status of all the jobs kill - used for killing a process Status: SUSPENDED, CONTINUED, RUNNING, STOPPED # Usage: sleep 100 \u0026amp; # Run the command as a backgroud process jobs # view all the jobs jobs -l # view all the jobs along with their job ID \u0026amp; process PID fg %\u0026lt;JOB_ID\u0026gt; # Resume the job in fore-ground which has the JOB_ID bg %\u0026lt;JOB_ID\u0026gt; # Resume the job in the back-ground which has the JOB_ID ctrl+z # Pauses executing of the current running job ctrl+c # terminates the current executing process SecureShell - SSH TCP/IP port 22 sshd - ssh server package openssh-server default sshd server config /etc/ssh/sshd_config ssh - ssh client package openssh-client default ssh client config /etc/ssh/ssh_config or ~/ssh/config # Usage: # -v = verbose mode for debugging # -4 = forces IPv4 # -6 = forces IPv6 # -i = specify the identity private keys # -p = port ssh user@HOST ssh -i private_key_file user@HOST ssh HOST # if the ssh keys are already copied in the server Generating the SSH keys - ssh-keygen # Usage: # -t = type of key, dsa, ecdsa, ecdsa-sk, ed25519, ed25519-sk, rsa, rsa-sha2-512(DEFAULT) # -b = Key length # -f = Specify file to write to # -C = comment ssh-keygen -t rsa -b 4096 ssh-keygen -t ed25519 Securely copying public SSH keys - ssh-copy-id # Usage: # -i = Specify the ssh keys file # -p = Port to login ssh-copy-id -i ~/.ssh/id_rsa.pub user@HOST scp \u0026amp; sftp Other Linux Commands ls - listing of files # Usage: # --color = enabling coloured output # -l = long listing # -h = human readable Listing of data # -t = sort by time # -R = Recursive listing of directories # Must use aliases - `.bash_aliases` alias ls=\u0026#39;ls -A -F -B --human --color\u0026#39; alias ll=\u0026#39;ls -l\u0026#39; alias la=\u0026#39;ls -A\u0026#39; alias lh=\u0026#39;ls -h\u0026#39; ls -lrt less - terminal pager # Usage: # -N = Line number enabled # +F = Real Time Monitoring sudo dmesg | less +F cat test.txt | less head - starting content of the files # Usage: # -n = line numbers to be displayed in the head # -c = bytes to be displayed from the file head file.txt head -n 10 file.txt head -c 150 file.txt tail - end of the content of files # Usage: # -f = real time updates to the files content appended to the end of file. # -n = no of lines of tail to be displayed tail file.txt tail -f file.log ln - soft/hard link # Usage: # -s = softlink/symlink ln sourceFileForHardLink hardLinkFileNameWithPath ln -s sourceFileForHardLink softLinkFileNameWithPath chmod - change file permissions User-Group-Others(\u0026mdash; \u0026mdash; \u0026mdash;) Read-Write-Execute(rwx) # Usage: # -R = Recursive # -V = Verbose chmod +x file.txt chmod 600 file.txt chmod u-w file.txt chmod u+x file.txt chown - change the ownership of files # Usage: # -R = Recursive # -V = Verbose chown user:group directory du - directory usage # Usage: # -h = human readable du -h df - disk filesystem # Usage: # -h = human readable # -i = inode listing # --total = total summary # --output = specify the output strategy df -h /proc df -h --output=source,avail,pcent,target inode - index number Data structures that keeps track of all the files in the filesystem all unique inode in a given filesystem stores metadata(type, size, group, user, permission, access, change \u0026amp; modification time) grep - search for string # Usage: # --color = color for search results # -r = recursive search # -i = ignore case search # -c = count the matching lines # -E = search extended using regex # -v = invert the search # -n = add the line numbers to the search results # -w = exact search # -o = just show the matched strings, not the entire line grep \u0026#34;test\u0026#34; test_file.txt grep \u0026#34;key\u0026#34; * find - find the files/directories etc # Usage: # -name = file the name # -iname = file name search using ignorecase # -type = type of search, d = directory, f = file # l = symbolic link, s = socket, b = block special # -exec = command execute the command in searched files # -user = search the file with the specified user # -size = size of files to be searched find . -name somefile.txt find /home -iname somefile.txt find / -type f -perm 0777 -print -exec chmod 644 {} \\; ps - lists all the processes which are running. # Usage: # -A or -e = list all the process running for all users # -T = process running with the current terminal(tty) # -f = full listing for the process # -u = filter process for a specific user # -L = List threads for a process PID # -G = List process associated with a group # -C = search process by name as PID is not known # -o = specifies the format for the columns ps -ef ps aux ps -L \u0026lt;PID\u0026gt; nohup - run process in the background, even when session is logged out, \u0026ldquo;no hangup\u0026rdquo;: prevents from receiving SIGHUP signals # Usage: nohup ./example.sh \u0026gt; output.log 2\u0026gt;\u0026amp;1 \u0026amp; nohup python example.py \u0026amp; disown - delete/remove jobs so that it doesn\u0026rsquo;t send SIGHUP signal # Usage: # -a = removes all the jobs # -h = marks job so that it DOESN\u0026#39;T send SIGHUP when shell receives a SIGHUP signal # -r = deletes running job disown -r disown -h %2 disown -a kill - kills the running process # Usage: # -l = lists all the SIG for kill # 1 - HUP - reload a process # 9 - KILL - Force kill a process # 15 - TERM - Graceful kill of process kill PID_NUMBER kill -9 PID fzf - CLI fuzzy finder rg - ripgrep - recursive grep pandoc - Convert documents #Usage pandoc README.md --from markdown --to docx -o tmp.docx sort - alphabetical(lowercase \u0026lt; uppercase) / increasing sorting by default #Usage # -r = reverse order # -n = recognise numerical results # -k = sort based on specific column # -u = remove duplicate entries # -c = check if the file is in sorted format # -M = arrange based on months # -s = stable sort sort -nr numeric.txt ls -l | sort -nk 5 sort -c test.txt uniq - remove duplicate entries, must be in sorted format #Usage # -c = count freq # -d = print only the lines which are duplicated # -u = print all unique lines # -i = check the frequency after ignoring the case sort file2 | uniq -c sort file2 | uniq -u sort file2 | uniq -cd cut - cut a field out # Usage: # -f = field to cut # -d = delimiter to use for cutting cut -d: -f1,6 /etc/passwd ls -lrt | cut -d \u0026#39; \u0026#39; -f 1 wc - word count # Usage: # -l = no of lines # -w = no of words # -m = no of characters wc -l tr - translate character # Usage: # -C = Complement character # -d = delete character tr A-Z a-z tr -d \u0026#39;e\u0026#39; sed - substitution sed s/Amazing/super/gi textfile.txt sed s/originalword/replaceword/g filename sed -n \u0026#39;3,5p\u0026#39; textfile.txt rsync - remote sync # Usage # -v = verbose # -r = recursive # -z = compress during transfer # -h = human-redable # -P or --progress = shows real-time progress rsync -avzhe ssh --progress /root/pkgs root@127.0.0.1:/root/pkgs rsync -zvh backup.tar.gz /tmp/backups/ curl - request URLs # Usage # -o = save data to a file # -L = redirect follow # -C = resume an interrupted download # -u = authentication # -v = verbose # --headers = specify request headers # -d or --data = POST request body # -X = specify the request type # -k = disable certificate checking curl -o logo.png https://reqbin.com/static/img/logo.png curl --header \u0026#39;Host: targetapplication.com\u0026#39; https://192.0.0.1:8080/ curl -X POST https://httpbin.org/post Operations with compressed files - zless, zmore, zcat, zgrep nc \u0026amp; telnet \u0026amp; netstat # Usage nc -lv 1234 # start a listener on port 1234 nc -zv google.com 443 # check if port is open nc -zv 10.0.2.4 1230-1235 # scanning a port range telnet host.com 1234 # connect to the port in the HOST netstat -an | grep LISTEN ","permalink":"https://jubinmathew1995.github.io/notes/cli/","summary":"CLI practical handbook of most used CLI commands","title":"CLI: Handbook"},{"content":"Installing Hugo Hugo is a static site generator written in go. We can install hugo easily using any of the package manager available for the different platforms. Since I am using macOS the below command worked for me. We can get the detailed installation steps from the hugo quick-start guide.\nbrew install hugo Creating a new Hugo Site Created a new repository which will act as the source repository for the blog site. And use the new hugo command to generate a new site.\nhugo new site \u0026lt;SITE NAME\u0026gt; Cloning the new repository, and creating a new hugo site in the cloned repository, --force option is used to force the site creation when the directory is not empty. -f yml option is used to create the hugo repository using the config.yml instead of config.toml.\nhugo new site . --force -f yml Updating the default archetypes Archetypes contain the default template which will be used while creating new posts/blogs etc using the hugo command. Hence, updating the below config file to the default.md. Read more on archetypes.\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} tags: [] author: [\u0026#34;Me\u0026#34;] showToc: false TocOpen: false hidemeta: true comments: false summary: \u0026#34;\u0026#34; description: \u0026#34;\u0026#34; disableHLJS: true # to disable highlightjs disableShare: false disableHLJS: false hideSummary: false searchHidden: true ShowReadingTime: true ShowBreadCrumbs: true ShowPostNavLinks: true cover: image: \u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34; # image path/url alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; # alt text caption: \u0026#34;\u0026lt;text\u0026gt;\u0026#34; # display caption under cover relative: false # when using page bundles set this to true hidden: true # only hide on current single page draft: true --- Add a theme for the Hugo site We will be using the hugo-PaperMod theme for our blog site. The themes can be imported by adding the themes as sub-modules to the existing repository. Read more quick-start.\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 Update the config file We need to update the config file with the needed configuration for the theme.\nbaseURL: \u0026#34;your base URL\u0026#34; languageCode: en-us title: \u0026#34;title\u0026#34; theme: \u0026#34;PaperMod\u0026#34; paginate: 5 params: env: production # to enable google analytics, opengraph, twitter-cards and schema. title: title description: \u0026#34;\u0026#34; keywords: [] author: [Me] DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: auto # dark, light, auto disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true disableSpecial1stPost: true disableScrollToTop: false comments: false hidemeta: false hideSummary: false showtoc: false tocopen: false # home-info mode homeInfoParams: Title: \u0026#34;Title\u0026#34; Content: \u0026gt; - Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\u0026#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. - It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. socialIcons: - name: email url: \u0026#34;mailto://abc@gmail.com\u0026#34; - name: twitter url: \u0026#34;https://twitter.com/\u0026#34; - name: stackoverflow url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#34;https://github.com/\u0026#34; - name: gitlab url: \u0026#34;https://gitlab.com/\u0026#34; - name: linkedin url: \u0026#34;https://linkedin.com/\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page responsiveImages: false # For responsive images menu: main: - identifier: Posts name: Posts url: /posts/ weight: 20 - identifier: tags name: Tags url: /tags/ weight: 20 Local testing using hugo server For local testing of the static site we can use the local server which comes with the Hugo for testing.\nhugo server or hugo server -D Adding a new post to the blog/posts site We can use the new command to create a new post. It will create a new post named my-first-post in the content/posts directory and the new file which is created will have the base template as of default.md archetypes created and updated earlier.\nhugo new posts/my-first-post.md Generate the static files for deployment We can use the hugo command for generating/building the static site which can later be used for deployment.\nhugo Please refer the hugo documentation for all the flags and options or refer the man pages for hugo.\nImplementing the CI/CD pipeline for automatic build \u0026amp; deployment We will be using the Github actions to build and deploy the static site in Github pages.\nGenerate Github tokens We need to generate a new personal access token from Github Tokens and use the same token in the repository which will be pushing the static build site for deployment to the external repository. Please refer this site.\nCreate the workflow We need to enable the github actions for automatically deploying the site. We will be deploying the site to an external repository. Please refer actions-gh-pages.\nname: project-build-deployment on: push: branches: [ main ] pull_request: branches: [ main ] workflow_dispatch: jobs: build: runs-on: ubuntu-latest steps: - name: repository-checkout uses: actions/checkout@v2 - name: update-submodule-theme-repo run: git submodule update --init --recursive - name: install-hugo uses: peaceiris/actions-hugo@v2 - name: build-project run: hugo -D --minify - name: deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.TOKEN }} external_repository: XXXXXX/YYYYYYYY publish_dir: ./public user_name: XXXXXX user_email: XXXXXX@XXXXXX.com publish_branch: main Enable the github pages for the external repository Enable the github pages in the /Settings/Pages.\nConclusion We just need to update the markdown files for the new posts and push it. And the CI/CD pipeline will automatically build and deploy the static site.\n","permalink":"https://jubinmathew1995.github.io/posts/my-blog-site/","summary":"Setup my profile \u0026amp; blog site using Hugo and github","title":"My Blog Site"}]